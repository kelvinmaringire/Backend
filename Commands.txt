pip freeze > requirements.txt

bash

sudo apt update

sudo apt upgrade

sudo apt install nginx

sudo apt install git

sudo ufw enable

sudo ufw status

sudo ufw allow 80/tcp

sudo ufw allow 8000/tcp

sudo ufw allow 443/tcp

sudo ufw allow ssh

sudo ufw reload

point domain to VPS
https://www.youtube.com/watch?v=NM2NkMfQLWI

sudo nginx -t   #test conf

sudo service nginx start

sudo systemctl restart nginx

sudo apt install redis-server

sudo apt install build-essential libpq-dev python3-dev python3-venv

sudo apt install postgresql postgresql-contrib
sudo apt-get install postgis   # for geo apps
sudo apt install gdal-bin libgdal-dev # for geo apps

sudo apt install -y postgresql-common
sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh

sudo -i -u postgres psql

ALTER USER postgres WITH PASSWORD 'talibk700';

CREATE DATABASE buybuddydb;

GRANT ALL PRIVILEGES ON DATABASE buybuddydb TO postgres;

ALTER USER postgres WITH SUPERUSER;

\q

cd /var/www

sudo git clone https://github.com/kelvinmaringire/Backend.git

cd Backend
sudo chmod -R 777 /var/www/Backend

python3 -m venv myenv

source myenv/bin/activate

sudo -u postgres psql buybuddydb < buybuddydb.sql

pip install -r requirements.txt

pip install GDAL==$(gdal-config --version)  # for geo apps

# settings.py
# GDAL_LIBRARY_PATH = 'C:/OSGeo4W/bin/gdal309.dll'  # Remove or comment this line

pip install gunicorn

mkdir static

mkdir conf

nano conf/gunicorn_config.py

command = '/var/www/Backend/myenv/bin/gunicorn'
pythonpath = '/var/www/Backend'
bind = '102.209.118.59:8000'
workers = 3

gunicorn -c conf/gunicorn_config.py buybuddy.wsgi


Ctrl Z && bg for playing in the background

nano buybuddy/settings/base.py


STATICFILES_DIRS = [
    "/var/www/Backend/buybuddy/static/",
]

STATIC_ROOT = "/var/www/Backend/static/"

MEDIA_ROOT = "/var/www/Backend/media/"

python manage.py collectstatic

deactivate

sudo nano /etc/nginx/sites-available/buybuddy

server {
    listen 80;
    server_name buybuddysave.co.za;

    location /static/ {
        alias /var/www/Backend/static/;
    }

location /ws/ {
    proxy_pass http://102.209.118.59:8000;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}


    location / {
        proxy_pass http://102.209.118.59:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

cd /etc/nginx/sites-enabled/

sudo ln -s /etc/nginx/sites-available/buybuddy

sudo rm default

sudo apt install certbot python3-certbot-nginx

sudo certbot --nginx -d buybuddysave.co.za

sudo systemctl restart nginx

server {
    server_name buybuddysave.co.za;

    location /static/ {
        alias /var/www/Backend/static/;
    }


location /ws/ {
    proxy_pass http://102.209.118.59:8000;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}


    location / {
        proxy_pass http://102.209.118.59:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/buybuddysave.co.za/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/buybuddysave.co.za/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


}
server {
    if ($host = buybuddysave.co.za) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    server_name buybuddysave.co.za;
    return 404; # managed by Certbot

}